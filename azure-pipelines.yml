trigger:
- main

pr:
- main

jobs:
- job: Deploy
  pool:
    name: 'Windows VM'
    demands: msbuild
    vmImage: 'Windows VM'

  steps:
  - checkout: self
    clean: true
    fetchDepth: 1
    displayName: 'Checkout repository'


  - script: dotnet build --configuration $(BuildConfiguration)
    displayName: 'Build project'

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: '**\bin\$(BuildConfiguration)\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: 'Copy build artifacts'

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: '**\$(BuildConfiguration)\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: 'Copy additional files'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: 'Publish build artifacts'

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)'
      Contents: '**'
      TargetFolder: 'c:\temp'
      CleanTargetFolder: true
    displayName: 'Copy artifacts to Windows VM'

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # Your deployment script or commands on the Windows VM
        # You may need to adjust this based on your deployment requirements
        Invoke-Command -ComputerName YourWindowsVMAgent -ScriptBlock {
          # Your deployment script here
        } -Credential $env:USERNAME
    displayName: 'Run deployment script on Windows VM'

